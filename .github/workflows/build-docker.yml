name: Build jalign docker

on:
  workflow_dispatch:
    inputs:
      image-tag:
        description: "Docker image tag, If omitted will use github short sha"
        required: false
        type: string

permissions:
  id-token: write # Required for assuming an AWS role
  contents: read # Required for actions/checkout

env:
  AWS_REGION: us-east-1
  AWS_ROLE_NAME: github-actions-ecr
  AWS_ACCOUNT: 337532070941

  GCP_WORKLOAD_IDENTITY_PROVIDER: projects/55428976747/locations/global/workloadIdentityPools/devops-pool/providers/devops-pool-provider
  GCP_SERVICE_ACCOUNT: gcr-push-sa@ultima-data-307918.iam.gserviceaccount.com
  GAR_BASE_URL: us-central1-docker.pkg.dev
  GAR_REPO: us-central1-docker.pkg.dev/ultima-data-307918/ultimagen

  DOCKER_IMAGE: jalign

jobs:
  build-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: benjlevesque/short-sha@v2.2
        id: short-sha
        with:
          length: 7

      - name: Set tag based on commit sha
        id: set-tag
        if: ${{ inputs.image-tag == '' }}
        run: |
          if [ ${{ github.ref_name }} == 'main' ]; then
            echo "imageTag=main_${{ steps.short-sha.outputs.sha }}" >>$GITHUB_OUTPUT;
          else
            echo "imageTag=test_${{ steps.short-sha.outputs.sha }}" >>$GITHUB_OUTPUT;
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/${{ env.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Login to GCR
        id: gcr-login
        uses: docker/login-action@v2
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set image tags
        run: |
          set -e

          image_tags=(
            ${{ inputs.image-tag || steps.set-tag.outputs.imageTag }}
          )
          docker_registries=()
          gar_repo=${{ env.GAR_REPO }}
          docker_registries+=(
            ${{ steps.ecr-login.outputs.registry }}
            ${gar_repo}
          )

          for registry in ${docker_registries[@]}; do
            for tag in ${image_tags[@]}; do
              docker_destinations+=${registry}/${{ env.DOCKER_IMAGE }}:${tag},
            done
          done

          echo "GAR_REPO=${gar_repo}" >> ${GITHUB_ENV}
          echo "DOCKER_DESTINATIONS=${docker_destinations%,}" >> ${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          provenance: false
          push: true
          tags: ${{ env.DOCKER_DESTINATIONS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update action summary with built tags
        run: |
          echo "### ECR LOGIN" >> ${GITHUB_STEP_SUMMARY}
          echo "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.ecr-login.outputs.registry }}" >> ${GITHUB_STEP_SUMMARY}
          echo "### GCR LOGIN" >> ${GITHUB_STEP_SUMMARY}
          echo "gcloud auth configure-docker ${{ env.GAR_BASE_URL }}" >> ${GITHUB_STEP_SUMMARY}
          echo "### IMAGE TAGS" >> ${GITHUB_STEP_SUMMARY}
          for dest in $(echo "${{ env.DOCKER_DESTINATIONS }}" | sed 's/,/ /g'); do
            echo "- ${dest}" >> ${GITHUB_STEP_SUMMARY}
          done